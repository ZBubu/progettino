from flask import Blueprint
from flask import render_template
from flask import request
from flask import redirect
from flask import url_for
from flask import flash
from flask import current_app   # definisce il contesto del modulo

from flask_login import login_user  # https://flask-login.readthedocs.io/en/latest/#flask_login.login_user
from flask_login import logout_user
from flask_login import login_required
from flask_login import current_user

from models.model import *

app = Blueprint('auth', __name__) 
@app.route('/login')
def login():
    return render_template('auth/login.html')

@app.route('/login', methods=['POST'])
def login_post():
    # manages the login form post request
    email = request.form.get('email')
    password = request.form.get('password')
    remember = True if request.form.get('remember') else False

    stmt = db.select(User).filter_by(email=email)
    user = db.session.execute(stmt).scalar_one_or_none()

    # check if the user actually exists
    # take the user-supplied password, hash it, and compare it to the hashed password in the database
    if not user:
        flash('We couldn\'t find your account')
        return redirect(url_for('auth.login')) # if the user doesn't exist or password is wrong, reload the page
    if not user.check_password(password):
        flash('Wrong password')
        return redirect(url_for('auth.login'))
    # if the above check passes, then we know the user has the right credentials
    login_user(user, remember=remember)
    return render_template('auth/profile.html' , name=current_user.username)

@app.route('/logout')
@login_required
def logout():
    username = current_user.username
    logout_user()
    return redirect(url_for('default.home'))

@app.route('/profile')
@login_required
def profile():
    risultati=current_user.results
    return render_template('auth/profile.html', name=current_user.username, results=risultati)

@app.route('/signup', methods=['GET'])
def signup():
    return render_template('auth/signup.html')

@app.route('/signup', methods=['POST'])
def signup_post():
    username = request.form.get('username')
    email = request.form.get('email')
    password = request.form.get('password')

    #current_app.logger.info(f'Username: {username}, email: {email}, password: {password}')

    user = User(username=username, email=email)
    user.set_password(password)  # Imposta la password criptata
    db.session.add(user)  # equivalente a INSERT
    db.session.commit()
    flash('User created, please login')
    return render_template('auth/login.html')

@login_required
@app.route('/admin')
def admin_page():
    #TODO: testare ruoli e protezione endpoint admin
    if current_user.is_authenticated and not current_user.has_role('admin'):
        flash("Accesso non autorizzato!")
        return redirect(url_for('default.home'))
    users = db.session.execute(db.select(User)).scalars().all()
    results = db.session.execute(db.select(Result)).scalars().all()
    return render_template('admin.html', users=users,results=results)


# ------------------- Admin CRUD for Users -------------------
# NOTE: The following admin CRUD routes were generated by GitHub Copilot.
# They add create/edit/delete handlers for User objects. Review and adjust
# validation/authorization as needed before use in production.

@login_required
@app.route('/admin/users/create', methods=['GET', 'POST'])
def admin_create_user():
    if not current_user.is_authenticated or not current_user.has_role('admin'):
        flash("Accesso non autorizzato!")
        return redirect(url_for('default.home'))

    if request.method == 'GET':
        return render_template('admin_user_form.html', user=None)

    # POST
    username = request.form.get('username')
    email = request.form.get('email')
    password = request.form.get('password')

    # basic validation
    if not username or not email:
        flash('Username e email sono obbligatori')
        return redirect(url_for('auth.admin_create_user'))

    user = User(username=username, email=email)
    if password:
        user.set_password(password)
    db.session.add(user)
    db.session.commit()
    flash('User creato')
    return redirect(url_for('auth.admin_page'))


@login_required
@app.route('/admin/users/<int:user_id>/edit', methods=['GET', 'POST'])
def admin_edit_user(user_id):
    if not current_user.is_authenticated or not current_user.has_role('admin'):
        flash("Accesso non autorizzato!")
        return redirect(url_for('default.home'))

    user = db.session.get(User, user_id)
    if not user:
        flash('User non trovato')
        return redirect(url_for('auth.admin_page'))

    if request.method == 'GET':
        return render_template('admin_user_form.html', user=user)

    # POST: update
    username = request.form.get('username')
    email = request.form.get('email')
    password = request.form.get('password')

    if username:
        user.username = username
    if email:
        user.email = email
    if password:
        user.set_password(password)

    db.session.commit()
    flash('User aggiornato')
    return redirect(url_for('auth.admin_page'))


@login_required
@app.route('/admin/users/<int:user_id>/delete', methods=['POST'])
def admin_delete_user(user_id):
    if not current_user.is_authenticated or not current_user.has_role('admin'):
        flash("Accesso non autorizzato!")
        return redirect(url_for('default.home'))

    user = db.session.get(User, user_id)
    if not user:
        flash('User non trovato')
        return redirect(url_for('auth.admin_page'))

    db.session.delete(user)
    db.session.commit()
    flash('User eliminato')
    return redirect(url_for('auth.admin_page'))


# ------------------- Admin CRUD for Results -------------------
# NOTE: The following admin CRUD routes were generated by GitHub Copilot.
# They add create/edit/delete handlers for Result objects. Review and adjust
# validation/authorization as needed before use in production.

@login_required
@app.route('/admin/results/create', methods=['GET', 'POST'])
def admin_create_result():
    if not current_user.is_authenticated or not current_user.has_role('admin'):
        flash("Accesso non autorizzato!")
        return redirect(url_for('default.home'))

    if request.method == 'GET':
        users = db.session.execute(db.select(User)).scalars().all()
        return render_template('admin_result_form.html', result=None, users=users)

    # POST
    user_id = request.form.get('user_id')
    expression = request.form.get('expression')
    result_value = request.form.get('result')

    if not user_id or not expression or not result_value:
        flash('Tutti i campi sono obbligatori')
        return redirect(url_for('auth.admin_create_result'))

    res = Result(user_id=int(user_id), expression=expression, result=result_value)
    db.session.add(res)
    db.session.commit()
    flash('Result creato')
    return redirect(url_for('auth.admin_page'))


@login_required
@app.route('/admin/results/<int:result_id>/edit', methods=['GET', 'POST'])
def admin_edit_result(result_id):
    if not current_user.is_authenticated or not current_user.has_role('admin'):
        flash("Accesso non autorizzato!")
        return redirect(url_for('default.home'))

    res = db.session.get(Result, result_id)
    if not res:
        flash('Result non trovato')
        return redirect(url_for('auth.admin_page'))

    if request.method == 'GET':
        users = db.session.execute(db.select(User)).scalars().all()
        return render_template('admin_result_form.html', result=res, users=users)

    # POST: update
    user_id = request.form.get('user_id')
    expression = request.form.get('expression')
    result_value = request.form.get('result')

    if user_id:
        res.user_id = int(user_id)
    if expression:
        res.expression = expression
    if result_value:
        res.result = result_value

    db.session.commit()
    flash('Result aggiornato')
    return redirect(url_for('auth.admin_page'))


@login_required
@app.route('/admin/results/<int:result_id>/delete', methods=['POST'])
def admin_delete_result(result_id):
    if not current_user.is_authenticated or not current_user.has_role('admin'):
        flash("Accesso non autorizzato!")
        return redirect(url_for('default.home'))

    res = db.session.get(Result, result_id)
    if not res:
        flash('Result non trovato')
        return redirect(url_for('auth.admin_page'))

    db.session.delete(res)
    db.session.commit()
    flash('Result eliminato')
    return redirect(url_for('auth.admin_page'))
